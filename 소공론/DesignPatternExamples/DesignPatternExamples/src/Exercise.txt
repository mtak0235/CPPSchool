
[ 디자인 패턴 연습문제 ]

1.Factory method 디자인 패턴

 - 별도의 연습문제 없음


2. Abstract Factory 디자인 패턴
 - Samsung 엘레베이터를 추가

3. Singleton 디자인 패턴
 - Ticket 매니저 클래스 객체를 여러 쓰레드에서 동시에 사용하는 상황에서
   race condition이 발새하지 않도록 수정하시오.
   
4. Adapter 디자인 패턴
 - ClassC를 새로 추가하시오. 
   이 클래스는 anotherSpecificRequest() 메소드를 포함한다고 가정하자.
   이 클래스를 ClassA와 호환되어 사용하도록 수정하시오. 
   단. ClassB에 대한 어댑터 클래스를 만드는 방식을 참고해서 작성하시오.
   
   
5. Composite 디자인 패턴
 - 컴퓨터 부품으로 Headset을 새로 추가하시오. 
  Main 메소드에서 이 부품을 이용하도록 수정하시오.
  이 과정에서 기존의 소스코드를 어디만 수정하면 되는지 이해하시오. 
  
6. Iterator 디자인 패턴
 - Main.java와 ThreeIntegers.javad와 ThreeIntegersIterator.java 만 남기고 
   Iterable.java Iterator.java를 삭제하시오.
 - 삭제한 파일 대신 표준 자바 라이브러리 클래스 Iterable과 Iterator를 사용해서 다시 작성하고,
 - Main.java의 Exercise2를 완성하시오.
 - 단, 표준 자바 라이브러리 클래스 Iterator에서 요구하는 remove 메소드는 내용을 비워놓는다.
 
 7. Observer 디자인 패턴
 - 별도의 연습문제 없음
 
 
 8. State 디자인 패턴
 
  - Light에 새로운 상태 SLEEP을 추가하시오.
    Light가 켜진 상태에서 다시 ON 버튼을 누르면 SLEEP 상태로 변경되고,
    SLEEP 상태에서 ON 버튼을 누르면 켜진 상태로 돌아온다.
    SLEEP 상태에서 OFF 버튼을 누르면 Light를 끈다.

9. Decorator 디자인 패턴

  - CrossingDecorator 클래스를 추가하시오.
  
  - Client 클래스에 다음 조합을 추가하시오.
     Display roadWithCrossingAndLaneAndTraffic = new LaneDecorator(new TrafficDecorator(new CrossingDecorator (new RoadDisplay))));
     roadWithCrossingAndLaneAndTraffic.draw();    
    
    